<?xml version="1.0" encoding="utf-8"?>
<!--  (c) 2006 Microsoft Corporation  -->
<policyDefinitionResources xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" revision="1.0" schemaVersion="1.0" xmlns="http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions">
  <displayName>enter display name here</displayName>
  <description>enter description here</description>
  <resources>
    <stringTable>
      <string id="Rpc">Remote Procedure Call</string>
      <string id="RpcEEInfoOff">Off</string>
      <string id="RpcEEInfoOffWithExc">Off with Exceptions</string>
      <string id="RpcEEInfoOn">On</string>
      <string id="RpcEEInfoOnWithExc">On with Exceptions</string>
      <string id="RpcEnableAuthEpResolution">RPC Endpoint Mapper Client Authentication</string>
      <string id="RpcEnableAuthEpResolution_Help">Enabling this setting directs RPC Clients that need to communicate with the Endpoint Mapper Service to authenticate as long as the RPC call for which the endpoint needs to be resolved has authentication information.

Disabling this setting will cause RPC Clients that need to communicate with the Endpoint Mapper Service to not authenticate. The Endpoint Mapper Service on machines running Windows NT4 (all service packs) cannot process authentication information supplied in this manner. This means that enabling this setting on a client machine will prevent that client from communicating with a Windows NT4 server using RPC if endpoint resolution is needed.

By default, RPC Clients will not use authentication to communicate with the RPC Server Endpoint Mapper Service when asking for the endpoint of a server.

Note: This policy will not be applied until the system is rebooted. </string>
      <string id="RpcExtendedErrorInformation">Propagation of extended error information</string>
      <string id="RpcExtendedErrorInformation_Help">Directs the RPC Runtime to generate extended error information when an error occurs.

Extended error information includes the local time that the error occurred, the RPC version, and the name of the computer on which the error occurred or was propagated. Programs can retrieve the extended error information by using standard Windows application programming interfaces (APIs).

If you disable this setting or do not configure it, the RPC Runtime only generates a status code to indicate an error condition.

To use this setting, enable the setting, and then select an error response type in the drop-down box.

--  "Off" disables all extended error information for all processes. RPC only generates an error code.

--  "On with Exceptions" enables extended error information but lets you disable it for selected processes. To disable extended error information for a process while this setting is in effect, the command that starts the process must begin with one of the strings in the Extended Error Information Exception field.

-- "Off with Exceptions" disables extended error information but lets you enable it for selected processes. To enable extended error information for a process while this setting is in effect, the command that starts the process must begin with one of the strings in the Extended Error Information Exception field.

--  "On" enables extended error information for all processes.

Note: For information about the Extended Error Information Exception field, see the Windows 2000 Platform Software Development Kit (SDK).

Note: Extended error information is formatted to be compatible with other operating systems and older Microsoft operating systems, but only newer Microsoft operating systems can read and respond to the information.

Note: The default setting, "Off," is designed for systems where extended error information is considered to be sensitive, and it should not be made available remotely.

Note: This policy setting will not be applied until the system is restarted.</string>
      <string id="RpcIDFOff">Off</string>
      <string id="RpcIDFOn">On</string>
      <string id="RpcIgnoreDelegationFailure">Ignore Delegation Failure</string>
      <string id="RpcIgnoreDelegationFailure_Help">Directs the RPC Runtime to ignore delegation failures if delegation was asked for.

Windows Server 2003 family includes a new delegation model - constrained delegation. In this model the security system does not report that delegation was enabled on a security context when a client connects to a server. Callers of RPC and COM are encouraged to use the RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE flag, but some applications written for the traditional delegation model may not use this flag and will encounter RPC_S_SEC_PKG_ERROR when connecting to a server that uses constrained delegation.

If you disable this setting, do not configure it or set it to "Off", the RPC Runtime will generate RPC_S_SEC_PKG_ERROR errors to applications that ask for delegation and connect to servers using constrained delegation. If you configure this setting to "On", the RPC Runtime will accept security contexts that do not support delegation as well as security contexts that do support delegation.

--  "Off" directs the RPC Runtime to generate RPC_S_SEC_PKG_ERROR if the client asks for delegation, but the created security context does not support delegation.

-- "On" directs the RPC Runtime to accept security contexts that do not support delegation even if delegation was asked for.

Note: This policy setting will not be applied until the system is rebooted.</string>
      <string id="RpcMinimumHttpConnectionTimeout">Minimum Idle Connection Timeout for RPC/HTTP connections</string>
      <string id="RpcMinimumHttpConnectionTimeout_Help">Directs the RPC Runtime to assume the specified timeout as the idle connection timeout even if the IIS server running the RPC HTTP proxy is configured with a higher timeout. If the IIS server running the RPC HTTP proxy is configured with a lower idle connection timeout, the timeout on the IIS server is used. The timeout is given in seconds.

This setting is useful in cases where a network agent like an HTTP proxy or a router uses a lower idle connection timeout than the IIS server running the RPC HTTP proxy. In such cases RPC over HTTP clients may encounter errors because connections will be timed out faster than expected. Using this setting you can force the RPC Runtime and the RPC Proxy to use a lower connection timeout.

This setting is only applicable when the RPC Client, the RPC Server and the RPC HTTP Proxy are all running Windows Server 2003 family/Windows XP SP1 or higher versions. If either the RPC Client or the RPC Server or the RPC HTTP Proxy run on an older version of Windows, this setting will be ignored.

The minimum allowed value for this setting is 90 seconds. The maximum is 7200 (2 hours).

If you disable this setting or do not configure it, the idle connection timeout on the IIS server running the RPC HTTP proxy will be used.

Note: This policy setting will not be applied until the system is rebooted.</string>
      <string id="RpcRestrictRemoteClients">Restrictions for Unauthenticated RPC clients</string>
      <string id="RpcRestrictRemoteClients_Help">If you enable this setting, it directs the RPC Runtime on an RPC server to restrict unauthenticated RPC clients connecting to RPC servers running on a machine. A client will be considered an authenticated client if it uses a named pipe to communicate with the server or if it uses RPC Security. RPC Interfaces that have specifically asked to be accessible by unauthenticated clients may be exempt from this restriction, depending on the selected value for this policy.

If you disable this setting or do not configure it, the value of Authenticated will be used for Windows XP and the value of None will be used for Server SKUs that support this policy setting. If you enable it, the following values are available:

--  "None" allows all RPC clients to connect to RPC Servers running on the machine on which the policy is applied.

--  "Authenticated" allows only authenticated RPC Clients (per the definition above) to connect to RPC Servers running on the machine on which the policy is applied. Interfaces that have asked to be exempt from this restriction will be granted an exemption.

-- "Authenticated without exceptions" allows only authenticated RPC Clients (per the definition above) to connect to RPC Servers running on the machine on which the policy is applied. No exceptions are allowed.

Note: This policy setting will not be applied unti the system is rebooted.</string>
      <string id="RpcRestrictRemoteClientsAuth">Authenticated</string>
      <string id="RpcRestrictRemoteClientsHigh">Authenticated without exceptions</string>
      <string id="RpcRestrictRemoteClientsNone">None</string>
      <string id="RpcStateInfoAuto1">Auto1</string>
      <string id="RpcStateInfoAuto2">Auto2</string>
      <string id="RpcStateInfoBoth">Full</string>
      <string id="RpcStateInfoNone">None</string>
      <string id="RpcStateInformation">RPC Troubleshooting State Information</string>
      <string id="RpcStateInformation_Help">

Determines whether the RPC Runtime maintains RPC state information for the system, and how much information it maintains. Basic state information, which consists only of the most commonly needed state data, is required for troubleshooting RPC problems.

If you enable this setting, you can use the drop-down box to determine which systems maintain RPC state information. If the setting is disabled or not configured, RPC uses the Auto2 setting.

-- "None" indicates that the system does not maintain any RPC state information. Note: Because the basic state information required for troubleshooting has a negligible effect on performance and uses only about 4K of memory, this setting is not recommended for most installations.

--  "Auto1" directs RPC to maintain basic state information only if the computer has at least 64 MB of memory.

--  "Auto2" directs RPC to maintain basic state information only if the computer has at least 128 MB of memory and is running Windows 2000 Server, Windows 2000 Advanced Server, or Windows 2000 Datacenter Server. 

--  "Server" directs RPC to maintain basic state information on the computer, regardless of its capacity.

-- "Full" directs RPC to maintain complete RPC state information on the system, regardless of its capacity. Because this setting can degrade performance, it is recommended for use only while you are investigating an RPC problem.

Note: To retrieve the RPC state information from a system that maintains it, you must use a debugging tool.

Note: This policy will not be applied until the system is rebooted.</string>
      <string id="RpcStateInfoServer">Server</string>
    </stringTable>
    <presentationTable>
      <presentation id="RpcExtendedErrorInformation">
        <dropdownList refId="RpcExtendedErrorInformationList" defaultItem="0">Propagation of extended error information:</dropdownList>
        <textBox refId="RpcExtErrorExceptions">
          <label>Extended Error Information Exceptions:</label>
        </textBox>
      </presentation>
      <presentation id="RpcIgnoreDelegationFailure">
        <dropdownList refId="RpcIgnoreDelegationFailureList" defaultItem="0">Ignoring Delegation Failure:</dropdownList>
      </presentation>
      <presentation id="RpcMinimumHttpConnectionTimeout">
        <decimalTextBox refId="RpcMinimumHttpConnectionTimeoutValue" defaultValue="900" spinStep="10">Minimum Idle Connection Timeout (in seconds):</decimalTextBox>
      </presentation>
      <presentation id="RpcRestrictRemoteClients">
        <dropdownList refId="RpcRestrictRemoteClientsList" defaultItem="1">RPC Runtime Unauthenticated Client Restriction to Apply:</dropdownList>
      </presentation>
      <presentation id="RpcStateInformation">
        <dropdownList refId="RpcStateInformationList" defaultItem="2">RPC Runtime state information to maintain:</dropdownList>
      </presentation>
    </presentationTable>
  </resources>
</policyDefinitionResources>
