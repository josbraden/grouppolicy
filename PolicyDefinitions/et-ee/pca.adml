<?xml version="1.0" encoding="utf-8"?>
<!--  (c) 2006 Microsoft Corporation  -->
<policyDefinitionResources xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" revision="1.0" schemaVersion="1.0" xmlns="http://schemas.microsoft.com/GroupPolicy/2006/07/PolicyDefinitions">
  <displayName>enter display name here</displayName>
  <description>enter description here</description>
  <resources>
    <stringTable>


      <!-- Overall category text -->
      <string id="PcaScenarioCategory">Application Compatibility Diagnostics</string>
      

      <!-- Generic WDI text -->
      <string id="WdiScenarioExecutionPolicyLevelResolution">Detection, Troubleshooting and Resolution</string>
      <string id="WdiScenarioExecutionPolicyLevelTsOnly">Detection and Troubleshooting Only</string>


      <!-- Individual scenario text -->
      <string id="DetectInstallFailuresText">Detect application install failures</string>
      <string id="DetectUpdateFailuresText">Detect applications unable to launch installers under UAC</string>
      <string id="DetectDeprecatedComponentFailuresText">Detect application failures caused by deprecated Windows DLLs</string>
      <string id="DetectDeprecatedCOMComponentFailuresText">Detect application failures caused by deprecated COM objects</string>
      <string id="DetectUndetectedInstallersText">Detect application installers that need to be run as administrator</string>
      <string id="DetectBlockedDriversText">Notify blocked drivers</string>
      <!-- End individual scenario text -->


      <!-- Begin install failure scenario description -->
      <string id="DetectInstallFailuresExplain">This policy setting configures the Program Compatibility Assistant (PCA) to diagnose failures with application installations. 

If you enable this policy setting, the PCA is configured to detect failures in the execution of application installers through heuristics. When potential failures are detected, the PCA will provide the user with an option to restart the installer with Microsoft Windows XP compatibility mode.

If you disable this policy setting, the PCA is not configured to detect failures in execution of program installers.

If you do not configure this policy setting, the PCA will enable this diagnostic scenario by default.

Note: Disabling the "Turn off Program Compatibility Assistant" policy setting will cause this policy setting to have no effect. The Diagnostic Policy Service (DPS) and Program Compatibility Assistant Service must be running for the PCA to execute. These services can be configured using the Services snap-in to the Microsoft Management Console.</string>
      <!-- End install failure scenario description -->
      

      <!-- Begin update failure scenario description -->
      <string id="DetectUpdateFailuresExplain">This policy setting configures the Program Compatibility Assistant (PCA) to diagnose failures with programs under User Account Control (UAC). 

If you enable this policy setting, the PCA detects programs that failed to launch child processes that are installers (typically updaters). When this failure is detected, the PCA will apply the ELEVATECREATEPROCESS compatibility mode, which enables the program to successfully launch the installer as with administrator privileges the next time the program is run.

If you disable this policy setting, the PCA will not detect applications that fail to launch installers run under UAC.

If you do not configure this policy setting, the PCA detects programs that failed to launch child processes that are installers (typically updaters).

Note: Disabling the "Turn off Program Compatibility Assistant" policy setting will cause this policy setting to have no effect. The Diagnostic Policy Service (DPS) and Program Compatibility Assistant Service must be running for the PCA to execute. These services can be configured using the Services snap-in to the Microsoft Management Console.</string>
      <!-- End update failure scenario description -->
      

      <!-- Begin deprecated component failure scenario description -->
      <string id="DetectDeprecatedComponentFailuresExplain">This policy setting determines whether the Program Compatibility Assistant (PCA) will diagnose DLL load failures in programs. 

If you enable this policy setting, the PCA detects programs trying load legacy Microsoft Windows DLLs that are removed in this version of Windows. When this failure is detected, after the program is terminated, PCA will notify the user about this problem and provide an option to check the Microsoft Web site for solutions.

If you disable this policy setting, the PCA does not detect programs trying to load legacy Windows DLLs.

If you do not configure this policy setting, the PCA detects programs trying to load legacy Windows DLLs.

Note: Disabling the "Turn off Program Compatibility Assistant" policy setting will cause this policy setting to have no effect. The Diagnostic Policy Service (DPS) and Program Compatibility Assistant Service must be running for the PCA to execute. These services can be configured using the Services snap-in to the Microsoft Management Console.</string>
      <!-- End deprecated component failure scenario description -->


      <!-- Begin deprecated COM component failure scenario description -->
      <string id="DetectDeprecatedCOMComponentFailuresExplain">This policy setting determines whether the Program Compatibility Assistant (PCA) will diagnose DLL load or COM object creation failures in programs. 

If you enable this policy setting, the PCA detects programs trying to create legacy COM objects that are removed in this version of Windows. When this failure is detected, after the program is terminated, PCA will notify the user about this problem and provide an option to check the Microsoft Web site for solutions.

If you disable this policy setting, the PCA does not detect programs trying to create legacy COM objects.

If you do not configure this policy setting, the PCA detects programs trying to create legacy COM objects.

Note: Disabling the "Turn off Program Compatibility Assistant" policy setting will cause this policy setting to have no effect. The Diagnostic Policy Service (DPS) and Program Compatibility Assistant Service must be running for the PCA to execute. These services can be configured using the Services snap-in to the Microsoft Management Console.</string>
      <!-- End deprecated COM component failure scenario description -->


      <!-- Begin undetected installer failure scenario description -->
      <string id="DetectUndetectedInstallersExplain">This policy setting determines whether the Program Compatibility Assistant (PCA) will diagnose failures with application installers that are not detected to run as administrator. 

If you enable this policy setting, the PCA is configured to detect application installers which do not have privileges to run as administrator by the User Access Control (UAC). When potential failures are detected, the PCA will provide the user with an option to restart the installer as administrator.

If you disable this policy setting, the PCA will not detect application installers which do not have privileges to run as administrator by the UAC.

If you do not configure this policy setting, the PCA will be configured to detect application installers which do not have privileges to run as administrator by the UAC.


Note: Disabling the "Turn off Program Compatibility Assistant" policy setting will cause this policy setting to have no effect. The Diagnostic Policy Service (DPS) and Program Compatibility Assistant Service must be running for the PCA to execute. These services can be configured using the Services snap-in to the Microsoft Management Console.</string>
      <!-- End undetected installer failure scenario description -->


      <!-- Begin blocked drivers scenario description -->
      <string id="DetectBlockedDriversExplain">This policy setting determines whether the Program Compatibility Assistant (PCA) will diagnose drivers blocked due to compatibility issues. 

If you enable this policy setting, the PCA will notify the user of blocked driver issues with an option to check the Microsoft Web site for solutions.

If you disable this policy setting, the PCA will not notify the user of blocked driver issues. Note: With this policy setting in a disabled state, the user will not be presented with solutions to blocked drivers.

If you do not configure this policy setting, the PCA will notify the user of blocked driver issues with an option to check the Microsoft Web site for solutions.

Note: Disabling the "Turn off Program Compatibility Assistant" policy setting will cause this policy setting to have no effect. The Diagnostic Policy Service (DPS) and Program Compatibility Assistant Service must be running for the PCA to execute. These services can be configured using the Services snap-in to the Microsoft Management Console.</string>
      <!-- End blocked drivers scenario description -->
    </stringTable>

    <presentationTable>
      <presentation id="DetectUpdateFailuresTable">
        <dropdownList refId="DetectUpdateFailuresLevel" noSort="true" defaultItem="1">Scenario Execution Level</dropdownList>
      </presentation>
      <presentation id="DetectDeprecatedComponentFailuresTable">
        <dropdownList refId="DetectDeprecatedComponentFailuresLevel" noSort="true" defaultItem="1">Scenario Execution Level</dropdownList>
      </presentation>
      <presentation id="DetectDeprecatedCOMComponentFailuresTable">
        <dropdownList refId="DetectDeprecatedCOMComponentFailuresLevel" noSort="true" defaultItem="1">Scenario Execution Level</dropdownList>
      </presentation>
      <presentation id="DetectUndetectedInstallersTable">
        <dropdownList refId="DetectUndetectedInstallersLevel" noSort="true" defaultItem="1">Scenario Execution Level</dropdownList>
      </presentation>
    </presentationTable>
  </resources>
</policyDefinitionResources>
